
até aparece a pagina raiz, porem quando vou para a /sign-in aparece 404, porem quando rodo a aplicação com pnpm run dev então aparece /sign-in, o que pode ser?

Ah, isso é um problema comum quando se usa roteamento client-side (como React Router) com o Nginx! O problema acontece porque o Nginx está tentando encontrar um arquivo físico para `/sign-in`, que não existe - as rotas são gerenciadas pelo React no cliente.

Para resolver, precisamos configurar o Nginx para redirecionar todas as requisições para o index.html. Vou mostrar como fazer:



```nginx
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Força todos os caminhos a carregarem index.html
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Cache configuration para assets estáticos
    location /assets {
        expires 1y;
        add_header Cache-Control "public, no-transform";
    }

    # Configuração de gzip para melhor performance
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    gzip_disable "MSIE [1-6]\.";
}

```

E aqui está o Dockerfile atualizado:

```dockerfile
# Build stage
FROM node:18-alpine AS builder

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Set working directory
WORKDIR /app

# Copy package.json and pnpm-lock.yaml
COPY package.json pnpm-lock.yaml ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build the application
RUN pnpm run build

# Production stage
FROM nginx:alpine

# Remove default nginx configuration
RUN rm /etc/nginx/conf.d/default.conf

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy build files from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

```

Para implementar:

1. Crie um arquivo `nginx.conf` na raiz do seu projeto com o conteúdo do primeiro arquivo
2. Atualize seu Dockerfile com o conteúdo do segundo arquivo
3. Reconstrua a imagem:
```bash
docker build -t my-react-app .
```
4. Execute novamente:
```bash
docker run -p 3000:80 my-react-app
```

Agora todas as rotas do React Router devem funcionar corretamente, incluindo `/sign-in`. A configuração do Nginx faz com que todas as requisições sejam redirecionadas para o index.html, permitindo que o React Router assuma o controle do roteamento no lado do cliente.